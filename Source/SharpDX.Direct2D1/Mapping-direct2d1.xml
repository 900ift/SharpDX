<?xml version="1.0" encoding="utf-8"?>
<!--
// Copyright (c) 2010-2011 SharpDX - Alexandre Mutel
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
-->
<config id="sharpdx-direct2d1" depends="sharpdx sharpdx-dxgi" xmlns="urn:SharpGen.Config">
  
  <namespace>SharpDX.Direct2D1</namespace>
  <assembly>SharpDX.Direct2D1</assembly>
  
  <include file="d2d1.h" attach="true" />
  
  <naming />
  
  <extension>
    <define struct="SharpDX.Direct2D1.Matrix3x2" sizeof="24" />
    <create class="D2D1" />
  </extension>
  
  <bindings>
    <bind from="D2D_SIZE_F" to="System.Drawing.SizeF" />
    <bind from="D2D_SIZE_U" to="System.Drawing.Size" />
    <bind from="D2D_RECT_U" to="SharpDX.Rectangle" />
    <bind from="D2D_RECT_F" to="SharpDX.RectangleF" />
    <bind from="D2D_POINT_2F" to="System.Drawing.PointF" />
    <bind from="D2D_POINT_2U" to="System.Drawing.Point" />
    <bind from="D2D_COLOR_F" to="SharpDX.Color4" />
    <bind from="D2D_MATRIX_3X2_F" to="SharpDX.Direct2D1.Matrix3x2" />    
  </bindings>
  
  <mapping>
    <context>sharpdx-direct2d1-ext</context>
    <context>d2d1</context>
    
    <map enum="D2D1(.*)" name-tmp="$1" />
    <map enum-item="D2D1_FEATURE_LEVEL_(.*)" name="Level_$1" />
    <map enum-item="D2D1_GAMMA_2_2" name="StandardRgb" />
    <map enum-item="D2D1_GAMMA_1_0" name="Linear" />
    
    <map struct="D2D1(.*)" name-tmp="$1" />
    
    <map interface="ID2D1(.+)" name-tmp="$1" />
    <remove method="ID2D(\d+)RenderTarget::CreateBitmapFromWicBitmap" />
    <remove method="ID2D(\d+)Factory::CreateWicBitmapRenderTarget" />
    <map method="ID2D1Bitmap::CopyFrom.*" visibility="internal" />
    <map method="ID2D1Bitmap::GetDpi" visibility="internal" />
    <map interface="ID2D1DCRenderTarget" name="DeviceContextRenderTarget" />
    <map method="ID2D1DCRenderTarget::BindDC" name="BindDeviceContext" />
    <map method="ID2D1Factory::GetDesktopDpi" visibility="internal" />
    <map method="ID2D(\d+)Factory::Create.*" visibility="internal" />

    <!-- Create Fast out arguments for all Create.* methods -->
    <map param="ID2D(\d+)Factory::CreateRectangleGeometry::rectangleGeometry" attribute="out fast"/>
    <map param="ID2D(\d+)Factory::CreateRoundedRectangleGeometry::roundedRectangleGeometry" attribute="out fast"/>
    <map param="ID2D(\d+)Factory::CreateEllipseGeometry::ellipseGeometry" attribute="out fast"/>
    <map param="ID2D(\d+)Factory::CreateGeometryGroup::geometryGroup" attribute="out fast"/>
    <map param="ID2D(\d+)Factory::CreateTransformedGeometry::transformedGeometry" attribute="out fast"/>
    <map param="ID2D(\d+)Factory::CreatePathGeometry::pathGeometry" attribute="out fast"/>
    <map param="ID2D(\d+)Factory::CreateStrokeStyle::strokeStyle" attribute="out fast"/>
    <map param="ID2D(\d+)Factory::CreateDrawingStateBlock::drawingStateBlock" attribute="out fast"/>
    <map param="ID2D(\d+)Factory::CreateHwndRenderTarget::hwndRenderTarget" attribute="out fast"/>
    <map param="ID2D(\d+)Factory::CreateDxgiSurfaceRenderTarget::renderTarget" attribute="out fast"/>
    <map param="ID2D(\d+)Factory::CreateDCRenderTarget::dcRenderTarget" attribute="out fast"/>

    <map method="ID2D1Geometry::CombineWithGeometry" name="Combine" />
    <map method="ID2D1Geometry::CompareWithGeometry" name="Compare" />
    <map param="relation" return="true" />
    <map param="ID2D1Geometry::ComputeArea::area" return="true" />
    <map param="ID2D1Geometry::ComputeLength::length" return="true" />
    <map param="ID2D1Geometry::ComputePointAtLength::point" return="true" />
    <map param="ID2D1Geometry::FillContainsPoint::contains" return="true" />
    <map param="ID2D1Geometry::GetBounds::bounds" return="true" />
    <map param="ID2D1Geometry::GetWidenedBounds::bounds" return="true" />
    <map param="ID2D1Geometry::StrokeContainsPoint::contains" return="true" />
    <map method="ID2D1GeometryGroup::GetSourceGeometries" visibility="internal" />
    <map param="ID2D1GdiInteropRenderTarget::GetDC::hdc" return="true" />
    <map interface="ID2D1HwndRenderTarget" name="WindowRenderTarget" />
    <map param="ID2D1PathGeometry::Open::geometrySink" return="true" />
    <map method="ID2D1RectangleGeometry::GetRect" name="GetRectangle" />
    
    <map method="ID2D(\d+)RenderTarget::Create.*" visibility="internal" />

    <!-- Create Fast out arguments for all Create.* methods -->
    <map param="ID2D(\d+)RenderTarget::CreateBitmap::bitmap" attribute="out fast"/>
    <map param="ID2D(\d+)RenderTarget::CreateSharedBitmap::bitmap" attribute="out fast"/>
    <map param="ID2D(\d+)RenderTarget::CreateBitmapBrush::bitmapBrush" attribute="out fast"/>
    <map param="ID2D(\d+)RenderTarget::CreateSolidColorBrush::solidColorBrush" attribute="out fast"/>
    <map param="ID2D(\d+)RenderTarget::CreateGradientStopCollection::gradientStopCollection" attribute="out fast"/>
    <map param="ID2D(\d+)RenderTarget::CreateLinearGradientBrush::linearGradientBrush" attribute="out fast"/>
    <map param="ID2D(\d+)RenderTarget::CreateRadialGradientBrush::radialGradientBrush" attribute="out fast"/>
    <map param="ID2D(\d+)RenderTarget::CreateCompatibleRenderTarget::bitmapRenderTarget" attribute="out fast"/>
    <map param="ID2D(\d+)RenderTarget::CreateLayer::layer" attribute="out fast"/>
    <map param="ID2D(\d+)RenderTarget::CreateMesh::mesh" attribute="out fast"/>

    <map param="ID2D(\d+)RenderTarget::CreateSharedBitmap::data" attribute="in" />
    <map method="ID2D1RenderTarget::DrawTextA" visibility="internal" name="DrawText" />
    <map method="ID2D1RenderTarget::(.*)Dpi" visibility="internal" />
    <map method="ID2D(\d+)Mesh::Open" visibility="internal" name="Open_" />
    <map interface="ID2D(\d+).*Sink" callback="true" callback-dual="true" />
    
    <map function="D2D1(.+)" name-tmp="$1" />
    <map function="D2D1.*" dll="d2d1.dll" group="SharpDX.Direct2D1.D2D1" />
    <context-clear />
  </mapping>
</config>