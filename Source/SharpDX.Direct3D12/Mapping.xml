<?xml version="1.0" encoding="utf-8"?>
<!--
// Copyright (c) 2010-2013 SharpDX - Alexandre Mutel
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
-->
<config id="sharpdx-direct3d12" xmlns="urn:SharpGen.Config">
  <depends>sharpdx</depends>
  <depends>sharpdx-dxgi</depends>
  <ifndef name="WP8">
    <depends>sharpdx-d3dcompiler</depends>
  </ifndef>
  <depends>sharpdx-direct3d1x</depends>
  <depends>sharpdx-direct3d11</depends>

  <namespace>SharpDX.Direct3D12</namespace>  
  <assembly>SharpDX.Direct3D12</assembly>
  
  <!-- D3D12 includes -->
  <include file="d3d12.h" attach="true"/>
  <include file="d3d12sdklayers.h" attach="true" />

  <naming />

  <context-set id="d3d12-all">
    <context>sharpdx-direct3d12</context>
    <context>sharpdx-direct3d12-ext</context>
    <context>d3d12</context>
    <context>d3d12sdklayers</context>
  </context-set>

  <!-- D3D12 extensions -->
  <extension>
    <context id="d3d12-all"/>

    <const from-macro="D3D12_SDK_VERSION" class="SharpDX.Direct3D12.D3D12" type="int" name="SdkVersion" />
    <create class="D3D12" />
    
    <context-clear />
  </extension>

  <!-- D3D12 bindings -->
  <bindings>
    
  </bindings>

  <!-- D3D12 mapping -->
  <mapping>
    <context id="d3d12-all"/>
    <!--
    // *****************************************************************
    // D3D12 Enumerations
    // *****************************************************************
    -->

    <map enum-item="D3D12_RESOURCE_BINDING_TIER_(.*)" name="Tier$1"/>

    <!--
    // *****************************************************************
    // D3D12 Struct
    // *****************************************************************
    -->

    <map struct="D3D12_RESOURCE_DESC" name="ResourceDescription2"/>
    <map struct="D3D12_PIPELINE_STATE_DESC" struct-to-class="true"/>
    <map field="D3D12_PIPELINE_STATE_DESC::p([A-Z].*)" name="$1Pointer" visibility="private"/>
    <map field="D3D12_PIPELINE_STATE_DESC::RTVFormats" name="RenderTargetFormats"/>
    <map field="D3D12_PIPELINE_STATE_DESC::DSVFormat" name="DepthStencilFormat"/>

    <map field="D3D12_RESOURCE_TRANSITION_BARRIER_DESC::pResource" name="ResourcePointer" visibility="private"/>
    <map field="D3D12_RESOURCE_TRANSITION_BARRIER_DESC::StateBefore" type="D3D12_RESOURCE_USAGE"/>
    <map field="D3D12_RESOURCE_TRANSITION_BARRIER_DESC::StateAfter" type="D3D12_RESOURCE_USAGE"/>

    <map field="D3D12_RESOURCE_ALIASING_BARRIER_DESC::pResourceBefore" name="ResourceBeforePointer" visibility="private"/>
    <map field="D3D12_RESOURCE_ALIASING_BARRIER_DESC::pResourceAfter" name="ResourceAfterPointer" visibility="private"/>

    <map field="D3D11_RESOURCE_DESC::BindFlags" type="D3D11_BIND_FLAG" />
    <map field="D3D11_RESOURCE_DESC::CPUAccessFlags" name="CpuAccessFlags" type="D3D11_CPU_ACCESS_FLAG" />
    <map field="D3D11_RESOURCE_DESC::MiscFlags" name="OptionFlags" type="D3D11_RESOURCE_MISC_FLAG" />

    <!--Remove all fields for D3D12_RESOURCE_BARRIER_DESC as the union with pointers cannot be mapped safely in x86/x64 with C# explicit layout-->
    <remove field="D3D12_RESOURCE_BARRIER_DESC::.*"/>

    <!--
    // *****************************************************************
    // D3D12 Interfaces
    // *****************************************************************
    -->

    <map param="ID3D12Device::CreateDefaultResource::ppvResource" attribute="out"/>
    <map param="ID3D12Device::CreateBuffer::ppvBuffer" attribute="out"/>
    <map method="ID3D12Device::GetDefaultCommandQueue" property="false" visibility="private"/>
    <map method="ID3D12Resource::GetDesc11" name="Description1"/>

    <map param="ID3D12Device::CreateBuffer::ppvBuffer" type="ID3D12Resource" attribute="out fast"/>
    <map param="ID3D12Device::CreateDefaultResource::ppvResource" type="ID3D12Resource" attribute="out fast"/>
    
    
    <map method="ID3D12CommandList::SetIndexBufferTable" property="false"/>
    <map param="ID3D12CommandList::.*::BindAsTable" type="bool" default="false"/>
    <map method="ID3D12CommandList::IA(.*)" name="$1"/>
    <map method="ID3D12CommandList::IASetPrimitiveTopology" name="SetPrimitiveTopology"/>
    <map method="ID3D12CommandList::OM(.*)" name="$1"/>
    <map method="ID3D12CommandList::RS(.*)" name="$1"/>
    <map method="ID3D12CommandList::OMSetStencilRef" name="SetStencilReference"/>
    <map param="ID3D12CommandList::OMSetBlendFactor::BlendFactor" type="SHARPDX_VECTOR4"/>
    <map param="ID3D12CommandList::ClearRenderTargetView::ColorRGBA" type="SHARPDX_COLOR4"/>
    <map param="ID3D12CommandList::ClearUnorderedAccessViewUint::Values" type="SHARPDX_INT4"/>
    <map param="ID3D12CommandList::ClearUnorderedAccessViewFloat::Values" type="SHARPDX_VECTOR4"/>
    <map param="ID3D12CommandList::ResourceBarrier::pDesc" type="void"/>
    <map method="ID3D12CommandList::ResourceBarrier" visibility="private"/>
    
    <map method="ID3D12CommandList::RSSetViewports" rawptr="true"/>
    <map method="ID3D12CommandList::RSSetScissorRects" name="SetScissorRectangles" rawptr="true"/>


    <map method="ID3D12CommandList::(.*)ToHeap" name="$1To" />
    <move method="ID3D12CommandList::(.*)ToHeap" to="DescriptorManager" property="Descriptors" />

    <map method="ID3D12CommandList::(.*)InHeap" name="$1" />
    <move method="ID3D12CommandList::(.*)InHeap" to="DescriptorManager" property="Descriptors" />
    <map method="ID3D12CommandList::SetDescriptorHeap" name="SetHeap" />
    <move method="ID3D12CommandList::SetDescriptorHeap" to="DescriptorManager" property="Descriptors" />
    
    <move method="ID3D12CommandList::CopyDescriptors" to="DescriptorManager" property="Descriptors" />
    
    <move method="ID3D12CommandList::(.*)Table" to="DescriptorManager" property="Descriptors" />


    <!--
    // *****************************************************************
    // D3D12 Functions
    // *****************************************************************
    -->
   
    <map function="D3D12(.+)" name-tmp="$1" />
    <map function="D3D12.*" dll='"d3d12.dll"' group="SharpDX.Direct3D12.D3D12" />
    <map param="D3D12CreateDevice::ppDevice" attribute="out fast" />
    <map function="D3D12CreateDevice" check="false"/>
    <map param="D3D12CreateDevice.*?::Flags" type="D3D11_CREATE_DEVICE_FLAG" />

    <!--
    // *****************************************************************
    // D3D12 Constants
    // *****************************************************************
    -->

    <context-clear />
  </mapping>
</config>