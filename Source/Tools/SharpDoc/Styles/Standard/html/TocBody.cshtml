@*
// Copyright (c) 2010-2011 SharpDX - Alexandre Mutel
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.       
// -------------------------------------------------------------------------------
// Override this template to modify the body inside an html page
// -------------------------------------------------------------------------------
*@
@model SharpDoc.TemplateContext
@using SharpDoc.Model
@helper Dump()
    {
    if (Model.Assembly == null)
    {
        <div class="toc top"><div class="icon"></div><a href="ClassLibrary.htm" class="highlight">@Model.ClassLibraryName</a><div style="clear: both"></div></div>
        foreach (var assembly in Model.Assemblies)
        {
            <div class="toc child level0"><div class="icon"></div>@ToUrl(assembly,assembly.FullName + " Assembly")<div style="clear: both"></div></div>
        }
    }
    else
    {
        <div class="toc top"><div class="icon"></div><a href="ClassLibrary.htm">@Model.ClassLibraryName</a><div style="clear: both"></div></div>
        if (Model.Namespace == null)
        {
            <div class="toc up"><div class="icon"></div>@ToUrl(Model.Assembly, Model.Assembly.FullName + " Assembly", true, "class='highlight'")<div style="clear: both"></div></div>
            foreach (var ns in Model.Assembly.Namespaces)
            {
                <div class="toc child level0"><div class="icon"></div>@ToUrl(ns, ns.FullName + " Namespace")<div style="clear: both"></div></div>
            }
        }
        else
        {
            <div class="toc up"><div class="icon"></div>@ToUrl(Model.Assembly, Model.Assembly.FullName + " Assembly")<div style="clear: both"></div></div>
            if (Model.Type == null)
            {
                <div class="toc child level0"><div class="icon"></div>@ToUrl(Model.Namespace, Model.Namespace.FullName + " Namespace", true, "class='highlight'")<div style="clear: both"></div></div>
            }
            else
            {
                <div class="toc child level0"><div class="icon"></div>@ToUrl(Model.Namespace, Model.Namespace.FullName + " Namespace")<div style="clear: both"></div></div>
            }
            foreach (var type in Model.Namespace.Types)
            {
                if (Model.Type != null && type.Id == Model.Type.Id)
                {
                    <div class="toc child level1"><div class="icon"></div>@ToUrl(type, type.Name + " " + type.TypeName, true, "class='highlight'")<div style="clear: both"></div></div>
                }
                else
                {
                    <div class="toc child level1"><div class="icon"></div>@ToUrl(type, type.Name + " " + type.TypeName)<div style="clear: both"></div></div>
                }
            }
        }
    }
}